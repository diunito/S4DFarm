// Composable per gestire le notifiche di exploit
import { ref } from 'vue'
import { Notify } from 'quasar'

const exploitNotifications = ref([])
const notificationSettings = ref({
  enabled: true,
  showToast: true,
  showPopup: true,
  playSound: false
})

export function useExploitNotifications() {
  
  const addNotification = (alertData) => {
    const notification = {
      id: Date.now(),
      timestamp: new Date(),
      ...alertData
    }
    
    exploitNotifications.value.unshift(notification)
    
    // Mantieni solo le ultime 50 notifiche
    if (exploitNotifications.value.length > 50) {
      exploitNotifications.value = exploitNotifications.value.slice(0, 50)
    }
    
    // Mostra notifica toast se abilitata
    if (notificationSettings.value.showToast) {
      showToastNotification(alertData)
    }
    
    // Riproduci suono se abilitato
    if (notificationSettings.value.playSound) {
      playNotificationSound()
    }
  }
  
  const showToastNotification = (alertData) => {
    const message = `${alertData.total_alerts} exploit(s) stopped working in tick ${alertData.current_tick}`
    
    Notify.create({
      type: 'warning',
      message: message,
      caption: 'Click to view details',
      icon: 'warning',
      position: 'top-right',
      timeout: 5000,
      actions: [
        {
          label: 'View',
          color: 'white',
          handler: () => {
            // Emetti evento per aprire il popup dettagliato
            window.dispatchEvent(new CustomEvent('show-exploit-alert', { 
              detail: alertData 
            }))
          }
        },
        {
          label: 'Dismiss',
          color: 'white'
        }
      ]
    })
  }
  
  const playNotificationSound = () => {
    // Crea un beep semplice usando AudioContext
    try {
      const audioContext = new (window.AudioContext || window.webkitAudioContext)()
      const oscillator = audioContext.createOscillator()
      const gainNode = audioContext.createGain()
      
      oscillator.connect(gainNode)
      gainNode.connect(audioContext.destination)
      
      oscillator.frequency.value = 800
      oscillator.type = 'sine'
      
      gainNode.gain.setValueAtTime(0.3, audioContext.currentTime)
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5)
      
      oscillator.start(audioContext.currentTime)
      oscillator.stop(audioContext.currentTime + 0.5)
    } catch (error) {
      console.warn('Cannot play notification sound:', error)
    }
  }
  
  const clearNotifications = () => {
    exploitNotifications.value = []
  }
  
  const updateSettings = (newSettings) => {
    notificationSettings.value = { ...notificationSettings.value, ...newSettings }
    
    // Salva le impostazioni nel localStorage
    localStorage.setItem('exploitNotificationSettings', JSON.stringify(notificationSettings.value))
  }
  
  const loadSettings = () => {
    try {
      const saved = localStorage.getItem('exploitNotificationSettings')
      if (saved) {
        notificationSettings.value = { ...notificationSettings.value, ...JSON.parse(saved) }
      }
    } catch (error) {
      console.warn('Cannot load notification settings:', error)
    }
  }
  
  const getRecentNotifications = (limit = 10) => {
    return exploitNotifications.value.slice(0, limit)
  }
  
  // Carica le impostazioni salvate all'inizializzazione
  loadSettings()
  
  return {
    exploitNotifications,
    notificationSettings,
    addNotification,
    clearNotifications,
    updateSettings,
    getRecentNotifications
  }
}
